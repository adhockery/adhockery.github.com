<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ad-Hockery</title>
  <id>http://blog.freeside.co/</id>
  <link href="http://blog.freeside.co/"/>
  <link href="http://blog.freeside.co/feed.xml" rel="self"/>
  <updated>2015-01-29T11:34:00+00:00</updated>
  <author>
    <name>Rob Fletcher</name>
  </author>
  <entry>
    <title>Simple background polling with RxJava</title>
    <link rel="alternate" href="http://blog.freeside.co/2015/01/29/simple-background-polling-with-rxjava/"/>
    <id>http://blog.freeside.co/2015/01/29/simple-background-polling-with-rxjava/</id>
    <published>2015-01-29T11:34:00+00:00</published>
    <updated>2015-01-29T15:48:41+00:00</updated>
    <author>
      <name>Rob Fletcher</name>
    </author>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;I&amp;#8217;ve done odd bits of playing around with RxJava before but never dived into it very deeply. Today I wanted to re-implement an unreliable background polling operation and &lt;a href="https://twitter.com/tomaslin"&gt;Tomás Lin&lt;/a&gt; suggested I look at using &lt;a href="https://github.com/ReactiveX/RxJava"&gt;RxJava&lt;/a&gt;. This may be an obvious implementation to some but I had to do a bit of experimentation (and searching Stack Overflow) to come up with it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Imagine we&amp;#8217;re polling a web-service regularly. The service returns a JSON array of independent items (think events since last poll, Tweets with a particular hashtag or something similar). We want to do some processing (filtering, parsing to a type) on each item and then pass them off to a handler.&lt;/p&gt;
&lt;/div&gt;

&lt;div class="paragraph"&gt;
&lt;p&gt;The first thing we need is a heartbeat so:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="highlight"&gt;&lt;code class="java language-java"&gt;Observable.interval(30, TimeUnit.SECONDS)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;That will return an &lt;code&gt;Observable&amp;lt;Long&amp;gt;&lt;/code&gt; that emits a value every 30 seconds. The values are clock ticks starting at zero.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;At each tick we want to poll a remote service. For the sake of simplicity let&amp;#8217;s assume we&amp;#8217;re using a REST client like &lt;a href="http://square.github.io/retrofit/"&gt;Retrofit&lt;/a&gt; that does the HTTP transport and JSON parsing for us so we have an interface like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="highlight"&gt;&lt;code class="java language-java"&gt;public interface MessageService {
  // annotations are ommitted but this method makes a REST call
  List&amp;lt;Message&amp;gt; getRecentMessages();
}

public interface Message {
  boolean isFor(Recipient recipient);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;How do we translate our tick sequence into calls to &lt;code&gt;getRecentMessages&lt;/code&gt;? We can think of it as a &lt;em&gt;map&lt;/em&gt; operation – just one in which we don&amp;#8217;t care about the original value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="highlight"&gt;&lt;code class="java language-java"&gt;Observable.interval(30, TimeUnit.SECONDS)
          .map((tick) -&amp;gt; messageService.getRecentMessages())&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Now we have an &lt;code&gt;Observable&amp;lt;List&amp;lt;Message&amp;gt;&amp;gt;&lt;/code&gt;. So far so good. However, that &lt;code&gt;map&lt;/code&gt; operation is doing blocking I/O so we should shift it onto an appropriate scheduler (yes, Retrofit can return &lt;code&gt;rx.Observable&lt;/code&gt; so we could handle this in a non-blocking way but I&amp;#8217;ll skip that for the purposes of this discussion).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="highlight"&gt;&lt;code class="java language-java"&gt;Observable.interval(30, TimeUnit.SECONDS, Schedulers.io())
          .map(tick -&amp;gt; messageService.getRecentMessages())&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;For this example we&amp;#8217;ll consume the messages by just subscribing and logging what we get.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="highlight"&gt;&lt;code class="java language-java"&gt;Observable.interval(30, TimeUnit.SECONDS, Schedulers.io())
          .map(tick -&amp;gt; messageService.getRecentMessages())
          .subscribe(messages -&amp;gt; {
            // the subscriber is called with List&amp;lt;Message&amp;gt; every time
            // the remote service is polled
            for (Message message : messages) {
              log.info(message.toString())
            }
          })&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Of course the call to the remote service may fail – the service may be down or rate limiting us for example. We need to ensure our subscription doesn&amp;#8217;t end because the call threw an exception. We could add a &lt;code&gt;try/catch&lt;/code&gt; around the remote call but RxJava has a mechanism for retrying that is a little neater.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="highlight"&gt;&lt;code class="java language-java"&gt;Observable.interval(30, TimeUnit.SECONDS, Schedulers.io())
          .map(tick -&amp;gt; messageService.getRecentMessages())
          .retry()
          .subscribe(messages -&amp;gt; {
            for (Message message : messages) {
              log.info(message.toString())
            }
          })&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Now any exceptions are swallowed and the poll will get repeated at the next interval. We could get more sophisticated here and use a back-off policy but the key point is the subscriber only has to deal with messages that were successfully retrieved.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;That said, we probably want to know the remote service is giving us trouble so let&amp;#8217;s add some logging.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="highlight"&gt;&lt;code class="java language-java"&gt;Observable.interval(30, TimeUnit.SECONDS, Schedulers.io())
          .map(tick -&amp;gt; messageService.getRecentMessages())
          // The error handler is called with any exception raised upstream
          .doOnError(err -&amp;gt; log.error("Error retrieving messages", err))
          // Errors do not propagate past retry so they must be handled before
          .retry()
          .subscribe(messages -&amp;gt; {
            for (Message message : messages) {
              log.info(message.toString())
            }
          })&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Now the next thing we need to do is filter out any messages not intended for us. That&amp;#8217;s pretty easy with another &lt;code&gt;map&lt;/code&gt; operation on the &lt;code&gt;List&amp;lt;Message&amp;gt;&lt;/code&gt; emitted every time we poll.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="highlight"&gt;&lt;code class="java language-java"&gt;Observable.interval(30, TimeUnit.SECONDS, Schedulers.io())
          .map(tick -&amp;gt; messageService.getRecentMessages())
          .doOnError(err -&amp;gt; log.error("Error retrieving messages", err))
          .retry()
          .map(messages -&amp;gt;
            // a 2nd map operation is called with the List&amp;lt;Message&amp;gt; emitted upstream
            messages.stream()
                    // filter to a sub-list containing only "our" messages
                    .filter(message -&amp;gt; message.isFor(recipient))
                    // turn sub-list stream back into a List&amp;lt;Message&amp;gt;
                    .collect(Collectors.toList()))
          .subscribe(messages -&amp;gt; {
            for (Message message : messages) {
              log.info(message.toString())
            }
          })&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;At this point everything is working but notice that we&amp;#8217;re always dealing with &lt;code&gt;List&amp;lt;Message&amp;gt;&lt;/code&gt;. The grouping is just an artifact of the way the messages are retrieved from the remote service. We really should be dealing with a stream of individual messages. I scratched my head on this one for a little while until &lt;a href="https://twitter.com/jon_k_schneider/status/560582822767759360"&gt;Jon Schneider&lt;/a&gt; and &lt;a href="https://twitter.com/tim_yates/status/560582608015597568"&gt;Tim Yates&lt;/a&gt; provided me with an obvious and simple solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="highlight"&gt;&lt;code class="java language-java"&gt;Observable.interval(30, TimeUnit.SECONDS, Schedulers.io())
          .map(tick -&amp;gt; messageService.getRecentMessages())
          .doOnError(err -&amp;gt; log.error("Error retrieving messages", err))
          .retry()
          // turns each List&amp;lt;Message&amp;gt; into an Observable&amp;lt;Message&amp;gt; that flatMap
          // will join into a single stream
          .flatMap(Observable::from)
          .filter(message -&amp;gt; message.isFor(recipient))
          .subscribe(message -&amp;gt; log.info(message.toString()))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The &lt;code&gt;flatMap&lt;/code&gt; method allows you to produce a new &lt;code&gt;Observable&lt;/code&gt; for each value emitted from upstream and coalesceses them into a single downstream &lt;code&gt;Observable&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This is much neater. Now the downstream operations are free to deal with individual messages – we can handle the recipient filtering with a simple &lt;code&gt;filter&lt;/code&gt; operation instead of mapping the original list to a sub-list and we no longer need to loop over multiple messages in the subscriber.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;One last thing is that perhaps our remote service will give us some duplicate messages on subsequent calls. An ideal way to handle that would be to send a last message id or an HTTP &lt;code&gt;If-Modified-Since&lt;/code&gt; header with the request but if that&amp;#8217;s not an option Rx can help us.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="highlight"&gt;&lt;code class="java language-java"&gt;Observable.interval(30, TimeUnit.SECONDS, Schedulers.io())
          .map(tick -&amp;gt; messageService.getRecentMessages())
          .doOnError(err -&amp;gt; log.error("Error retrieving messages", err))
          .retry()
          .flatMap(Observable::from)
          // filter out any previously seen messages
          .distinct()
          .filter(message -&amp;gt; message.isFor(recipient))
          .subscribe(message -&amp;gt; log.info(message.toString()))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Obviously using &lt;code&gt;distinct&lt;/code&gt; assumes that our &lt;code&gt;Message&lt;/code&gt; objects are unique and implement &lt;code&gt;hashCode&lt;/code&gt; properly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;We now have a filtered stream of unique messages generated by polling a remote service in an error-tolerant way.&lt;/p&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Fixing current time for tests with Java 8's date/time API</title>
    <link rel="alternate" href="http://blog.freeside.co/2015/01/15/fixing-current-time-for-tests-with-java-8-s-date-time-api/"/>
    <id>http://blog.freeside.co/2015/01/15/fixing-current-time-for-tests-with-java-8-s-date-time-api/</id>
    <published>2015-01-15T14:19:00+00:00</published>
    <updated>2015-01-15T14:33:35+00:00</updated>
    <author>
      <name>Rob Fletcher</name>
    </author>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;For years I&amp;#8217;ve used the Joda Time library to provide a nicer alternative to the horrible mutable &lt;code&gt;java.util.Date&lt;/code&gt; class and the terrifying abyss of &lt;code&gt;java.util.Calendar&lt;/code&gt;. One thing, as a fanatical tester, that really appealed to me was the existence of the &lt;code&gt;DateTimeUtils&lt;/code&gt; class. All the Joda Time types use &lt;code&gt;DateTimeUtils&lt;/code&gt; as a source of the current instant and it exposes methods that allow tests to fix or offset the value that&amp;#8217;s returned. That can rule out some irritating flakiness in tests and enable testing of time zone / daylight savings bugs, timeout logic and so on while retaining the encapsulation of timestamp generation in production code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Of course, when you look at &lt;code&gt;DateTimeUtils&lt;/code&gt; with purist eyes it&amp;#8217;s a horrible hack. A static singleton encapsulating global mutable state! I guess that was the attitude of those responsible for JSR-352 that created the new &lt;code&gt;java.time&lt;/code&gt; package which is largely based on Joda Time. One of the things that &lt;em&gt;wasn&amp;#8217;t&lt;/em&gt; carried over from Joda Time is the &lt;code&gt;DateTimeUtils&lt;/code&gt; class. Instead factory methods such as &lt;code&gt;Instant.now()&lt;/code&gt; use a &lt;code&gt;Clock&lt;/code&gt; object – by default &lt;code&gt;Clock.systemUTC()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;div class="paragraph"&gt;
&lt;p&gt;The docs for &lt;code&gt;java.time.Clock&lt;/code&gt; state:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="quoteblock"&gt;
&lt;blockquote&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The primary purpose of this abstraction is to allow alternate clocks to be plugged in as and when required. Applications use an object to obtain the current time rather than a static method. This can simplify testing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Best practice for applications is to pass a &lt;code&gt;Clock&lt;/code&gt; into any method that requires the current instant.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Honestly &lt;em&gt;the only time&lt;/em&gt; I can think I&amp;#8217;d want to use an alternate &lt;code&gt;Clock&lt;/code&gt; implementation is when testing and now instead of a simple hack like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="highlight"&gt;&lt;code class="groovy language-groovy"&gt;given: DateTimeUtils.setCurrentMillisFixed(Random.nextLong())
when: // I do something
then: // something happens
cleanup: DateTimeUtils.setCurrentMillisSystem()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;I have to pass a fixed &lt;code&gt;Clock&lt;/code&gt; into the class/system under test. This is all very well in a dependency injection context but it&amp;#8217;s no fun when the timestamps are in value objects that have no reason to expose variant clock behavior to other elements of the production system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;I hate having to drill holes into my production code to enable tests to do things like this. If the graph of objects under test is a couple of layers deep you may need to add &lt;code&gt;Clock&lt;/code&gt; parameters in several places to generate timestamps in a controlled way where you need to. If you need to use multiple different fixed clocks to test a certain condition (ordering model objects based on their last update time, for example) then you need to expose a &lt;em&gt;setter&lt;/em&gt; for the &lt;code&gt;Clock&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;So in order to avoid the evil singleton anti-pattern instead we need to break object encapsulation and expose mutable state on objects just for the benefit of tests. I&amp;#8217;m sure I&amp;#8217;m not the only one to whom this doesn&amp;#8217;t feel like an improvement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;So what happens? I reinvent &lt;code&gt;DateTimeUtils&lt;/code&gt; by creating a static singleton with a global &lt;code&gt;Clock&lt;/code&gt; property that I can set at will directly from the test. Each place in the code that needs to generate a timestamp needs to remember to use the singleton in order that timestamps are consistently generated.&lt;/p&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>How can test it if I don't know what I'm building yet?</title>
    <link rel="alternate" href="http://blog.freeside.co/2014/09/24/how-can-i-test-it-if-i-dont-know-what-im-building-yet/"/>
    <id>http://blog.freeside.co/2014/09/24/how-can-i-test-it-if-i-dont-know-what-im-building-yet/</id>
    <published>2014-09-24T10:26:00+01:00</published>
    <updated>2014-09-24T14:46:44+01:00</updated>
    <author>
      <name>Rob Fletcher</name>
    </author>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;One objection to the practice of TDD I&amp;#8217;ve heard from several different people is along the lines of &lt;em&gt;“I don&amp;#8217;t know exactly what I&amp;#8217;m building at the outset, the code is experimental, so how can I write tests for it?”&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Frequently it is the case that you have an idea but don&amp;#8217;t know the mechanics of how you&amp;#8217;re going to implement it. I find this particularly when I&amp;#8217;m writing code that extends a third-party library. You don&amp;#8217;t know exactly where the API hooks you&amp;#8217;ll need to use are, your understanding of the API is fuzzy and you expect to learn it as you go. So how do you test-drive in that situation?&lt;/p&gt;
&lt;/div&gt;

&lt;div class="paragraph"&gt;
&lt;p&gt;XP has a recommendation here: write a &lt;a href="http://www.extremeprogramming.org/rules/spike.html"&gt;&lt;em&gt;spike&lt;/em&gt;&lt;/a&gt; then throw the code away once you have enough understanding of the technical solution to approach the problem in a more rigorous manner. In my experience that practice, while valid, doesn&amp;#8217;t sell TDD to a doubter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;What I think really causes the original objection is that the person in question is thinking at the wrong level. They&amp;#8217;re mentally diving straight in to code, to the solution, to the elegant and shining temple of technical brilliance they&amp;#8217;re about to erect. They&amp;#8217;re thinking about &lt;em&gt;how&lt;/em&gt; not &lt;em&gt;what&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Step back. Sure, you don&amp;#8217;t know what your code is going to look like or how it&amp;#8217;s going to interface with anything. If you try to start with low-level unit tests now you &lt;em&gt;will&lt;/em&gt; spend a lot of time re-writing tests for fine-grained interactions when you need to take a different approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Two things you &lt;em&gt;do&lt;/em&gt; know are what is going in to this thing you&amp;#8217;re going to build and what you want to come out of the other side.&lt;span class="footnote"&gt;[&lt;a id="_footnoteref_1" class="footnote" href="#_footnote_1" title="View footnote."&gt;1&lt;/a&gt;]&lt;/span&gt; So test that. Test that at a high level.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Writing a static asset pipeline that concatenates and minifies JavaScript and CSS files? Write a test that uses example files and makes assertions about what the result should look like. Writing an authentication system for a web-app? Write some browser-based tests that register accounts, log in, log out and verify authentication state via the user interface that doesn&amp;#8217;t exist yet. If you&amp;#8217;re using Cucumber you don&amp;#8217;t need to implement all the detail of the steps yet. If you&amp;#8217;re using Spock or JUnit (or RSpec, Scalaz, Jasmine or whatever) then compose an abstraction for the tests and leave out undefined details you don&amp;#8217;t know. Use sensible assumptions you can easily change (we&amp;#8217;re probably going to ask for a username and password), no-op helper methods (we don&amp;#8217;t know exactly how we&amp;#8217;ll verify the user is logged in just yet so we&amp;#8217;ll write a helper &lt;code&gt;isLoggedInAs(username)&lt;/code&gt;), elide over the irrelevant detail (we might require some other information when a user registers but we can add that later).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;None of those things require you to know how the code you&amp;#8217;re going to write is going to work. They require you to think about and formally specify what you expect in the way of input and output. It forces you to define the coarse-grained behavior of the software you&amp;#8217;re designing – &lt;em&gt;what&lt;/em&gt; you want it to do. The &lt;em&gt;how&lt;/em&gt; now has a framework for success into which it can grow.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In &lt;a href="http://www.growing-object-oriented-software.com"&gt;&lt;em&gt;Growing Object-Oriented Software Guided By Tests&lt;/em&gt;&lt;/a&gt; Steve Freeman and Nat Pryce describe this style of testing as &lt;em&gt;outside-in&lt;/em&gt;. You start with high level tests using a &lt;em&gt;“walking skeleton”&lt;/em&gt; and progressively work inward adding more detail and drilling down to low-level unit tests and the accompanying fine-grained behavior. The &lt;em&gt;walking skeleton&lt;/em&gt; is fleshed out as you go and by the end of the process has evolved into a passing end-to-end acceptance test suite.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;hr&gt;
&lt;div class="footnote" id="_footnote_1"&gt;
&lt;a href="#_footnoteref_1"&gt;1&lt;/a&gt; If you don&amp;#8217;t know &lt;em&gt;that&lt;/em&gt; I&amp;#8217;m pretty sure you need to figure it out before you start writing any code.
&lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Multiple interface mocks with Spock</title>
    <link rel="alternate" href="http://blog.freeside.co/2014/08/11/multiple-interface-mocks-with-spock/"/>
    <id>http://blog.freeside.co/2014/08/11/multiple-interface-mocks-with-spock/</id>
    <published>2014-08-11T11:46:00+01:00</published>
    <updated>2014-08-11T17:03:10+01:00</updated>
    <author>
      <name>Rob Fletcher</name>
    </author>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;Spock&amp;#8217;s &lt;code&gt;Mock&lt;/code&gt; factory method (as well as factories for the other types of test double; &lt;code&gt;Stub&lt;/code&gt; &amp;amp; &lt;code&gt;Spy&lt;/code&gt;) accepts a single interface representing the type you need a test double for. But what should you do if you need a test double that implements multiple interfaces?&lt;/p&gt;
&lt;/div&gt;

&lt;div class="paragraph"&gt;
&lt;p&gt;In some situations where code accepts flexible parameter types and is using runtime dispatching (or &lt;code&gt;instanceof&lt;/code&gt; checks) internally to perform different behavior we&amp;#8217;d want to test that different types were handled correctly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;A trivial example might be a method like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="highlight"&gt;&lt;code class="groovy language-groovy"&gt;class A {
  private Writer writer

  void handle(Writable thing) {
    try {
      thing.writeTo(writer)
    } finally {
      if (thing instanceof Closeable) {
        thing.close()
      }
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;we&amp;#8217;d want to test that not only is the &lt;code&gt;writeTo&lt;/code&gt; method from &lt;code&gt;Writable&lt;/code&gt; called but that if the parameter we pass is &lt;code&gt;Closeable&lt;/code&gt; it gets closed properly as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The simplest case, where the parameter &lt;em&gt;isn&amp;#8217;t&lt;/em&gt; &lt;code&gt;Closeable&lt;/code&gt; is easy to test:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="highlight"&gt;&lt;code class="groovy language-groovy"&gt;@Subject a = new A()

def "writes a writable"() {
  given:
  def x = Mock(Writable)

  when:
  a.handle(x)

  then:
  1 * x.writeTo(_)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;But when we need the mock parameter to implement the &lt;code&gt;Closeable&lt;/code&gt; interface as well as &lt;code&gt;Writable&lt;/code&gt; in order to drive the variant behavior it&amp;#8217;s not so obvious what to do. The following tests will fail because the &lt;code&gt;isntanceof&lt;/code&gt; check in the &lt;code&gt;handle&lt;/code&gt; method will return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="highlight"&gt;&lt;code class="groovy language-groovy"&gt;def "writes and closes a closeable writable"() {
  given:
  def x = Mock(Writable)

  when:
  a.handle(x)

  then:
  1 * x.writeTo(_)

  then:
  1 * x.close()
}

def "closes a closeable even if writing fails"() {
  given:
  def x = Mock(Writable) {
    writeTo(_) &amp;gt;&amp;gt; { throw new IOException() }
  }

  when:
  a.handle(x)

  then:
  thrown IOException

  and:
  1 * x.close()
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Although it might be nice you cannot do something like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="highlight"&gt;&lt;code class="groovy language-groovy"&gt;def mock = Mock(Comparable, Closeable)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;We could cast around for some class that happens to implement both interfaces and then use a &lt;code&gt;Spy&lt;/code&gt; but the simplest and cleanest solution is to just create our own interface inside the specification class:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="highlight"&gt;&lt;code class="groovy language-groovy"&gt;private static interface CloseableWritable extends Writable, Closeable {}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Then in the feature methods we can just use:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="highlight"&gt;&lt;code class="groovy language-groovy"&gt;given:
def x = Mock(CloseableWritable)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In retrospect this solution is the most obvious thing in the world but it took me a little while to remember that an interface can extend more than one other interface. Since we never actually need to implement &lt;code&gt;CloseableWritable&lt;/code&gt; with anything other than a mock it makes sense to encapsulate it inside the specification class.&lt;/p&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Spock and Hamcrest</title>
    <link rel="alternate" href="http://blog.freeside.co/2014/08/07/spock-and-hamcrest/"/>
    <id>http://blog.freeside.co/2014/08/07/spock-and-hamcrest/</id>
    <published>2014-08-07T11:23:00+01:00</published>
    <updated>2014-08-11T14:40:56+01:00</updated>
    <author>
      <name>Rob Fletcher</name>
    </author>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;Groovy&amp;#8217;s &lt;em&gt;power assert&lt;/em&gt; and Hamcrest matchers both solve a similar problem – getting decent diagnostic information from an assertion failure. When writing JUnit or Spock tests in Groovy it&amp;#8217;s typical to not use Hamcrest matchers as the &lt;em&gt;power assert&lt;/em&gt; is so much simpler and just as effective. It&amp;#8217;s worth bearing in mind, though that Hamcrest is also for helping clearly express the intent of an assertion. Spock provides support for Hamcrest matchers and I recently ran into a situation where I think it was the right thing to use.&lt;/p&gt;
&lt;/div&gt;

&lt;div class="paragraph"&gt;
&lt;p&gt;If we&amp;#8217;re testing a method that returns a &lt;code&gt;Collection&lt;/code&gt; that may contain duplicate entries but whose order is either non-deterministic or irrelevant to the test what is the best way to make an assertion about the content of the collection?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Imagine we&amp;#8217;re testing this interface:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="highlight"&gt;&lt;code class="groovy language-groovy"&gt;interface Api {
  List&amp;lt;String&amp;gt; getThings()
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The return value here is &lt;code&gt;List&lt;/code&gt; but it could be a &lt;em&gt;bag&lt;/em&gt; or some other collection type. It &lt;strong&gt;cannot&lt;/strong&gt; be &lt;code&gt;Set&lt;/code&gt; as the method may return a collection containing elements with a cardinality greater than 1.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Naïvely we might test it like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="highlight"&gt;&lt;code class="groovy language-groovy"&gt;expect:
api.things == expected

where:
expected = ["a", "a", "b"]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;If the order of the elements is non-deterministic this will sometimes pass and sometimes fail. No good.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Next we might try converting the result and the expectation to a &lt;code&gt;Set&lt;/code&gt; so that the comparison does not take order into account:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="highlight"&gt;&lt;code class="groovy language-groovy"&gt;expect:
api.things as Set == expected as Set&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This will pass, but it can mask an error in the implementation because it&amp;#8217;s not testing the cardinality of the elements. If &lt;code&gt;getThings()&lt;/code&gt; returns &lt;code&gt;["a", "b"]&lt;/code&gt; or &lt;code&gt;["a", "a", "a", "a", "b"]&lt;/code&gt; the test will still pass which is almost certainly not what we intend.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Another route is to enforce an artificial ordering for the purposes of testing:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="highlight"&gt;&lt;code class="groovy language-groovy"&gt;expect:
api.things.sort() == expected&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This works so long as the element type is &lt;code&gt;Comparable&lt;/code&gt; but I don&amp;#8217;t find it very clear. As a reader of this code it might not be obvious why the sort is being done. The assertion is correct but at the cost of some clarity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;I &lt;a href="https://twitter.com/rfletcherEW/status/490051366807961600"&gt;tweeted about this&lt;/a&gt; and got the following suggestion:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="highlight"&gt;&lt;code class="groovy language-groovy"&gt;expect:
def actual = api.things
actual.containsAll(expected) &amp;amp;&amp;amp; actual.size() == expected.size()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This appears thorough but also masks an error. The assertion will pass if the the actual result is &lt;code&gt;["a", "a", "b"]&lt;/code&gt; or &lt;code&gt;["a", "b", "b"]&lt;/code&gt;. It&amp;#8217;s checking the size of the list but not the cardinality of individual elements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://twitter.com/RobElliot266/status/490058541500469248"&gt;Rob Elliot pointed out&lt;/a&gt; that there&amp;#8217;s a Hamcrest matcher for exactly this condition. Using that, I think yields the best result for clarity and correctness:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="highlight"&gt;&lt;code class="groovy language-groovy"&gt;expect:
that api.things, containsInAnyOrder(*expected)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;One of the huge advantages of Spock and Groovy&amp;#8217;s power assert are in the expressiveness of test code but I think using Hamcrest in this case provides a more readable solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_implementation"&gt;Implementation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;To get this to work you need to import the &lt;em&gt;hamcrest-all&lt;/em&gt; library that contains a lot more matchers than the &lt;em&gt;hamcrest-core&lt;/em&gt; library that Spock pulls in by default.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="title"&gt;build.gradle&lt;/div&gt;
&lt;div class="content"&gt;
&lt;pre class="highlight"&gt;&lt;code class="groovy language-groovy"&gt;testCompile "org.hamcrest:hamcrest-all:1.3"&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Then you can static import Spock&amp;#8217;s &lt;code&gt;that&lt;/code&gt; method and the matcher itself:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="highlight"&gt;&lt;code class="groovy language-groovy"&gt;import static spock.util.matcher.HamcrestSupport.that
import static org.hamcrest.Matchers.containsInAnyOrder&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Closures and field visibility</title>
    <link rel="alternate" href="http://blog.freeside.co/2014/07/21/closures-and-field-visibility/"/>
    <id>http://blog.freeside.co/2014/07/21/closures-and-field-visibility/</id>
    <published>2014-07-21T11:34:00+01:00</published>
    <updated>2014-07-21T14:34:25+01:00</updated>
    <author>
      <name>Rob Fletcher</name>
    </author>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;I find Groovy Closures can sometimes behave in ways that, once I think about it, make perfect sense but initially seem surprising. One example of this is the fact that closures &lt;em&gt;declared in a parent class&lt;/em&gt; cannot “see” private fields of that class when run in the context of a child class.&lt;/p&gt;
&lt;/div&gt;

&lt;div class="paragraph"&gt;
&lt;p&gt;Take a look at this code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="highlight"&gt;&lt;code class="groovy language-groovy"&gt;class Multiplier {

  private int multiplier

  Multiplier(int multiplier) {
    this.multiplier = multiplier
  }

  List multiply(List values) {
    values.collect {
      it * multiplier
    }
  }
}

assert new Multiplier(3).multiply([1, 2, 3]) == [3, 6, 9]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The class has a private field &lt;code&gt;multiplier&lt;/code&gt; that gets referenced in a closure in one of the class methods. This works fine. However, what happens if we extend that class?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="highlight"&gt;&lt;code class="groovy language-groovy"&gt;class Doubler extends Multiplier {
  Doubler() { super(2) }
}

assert new Doubler().multiply([1, 2, 3]) == [2, 4, 6]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This code results in &lt;code&gt;MissingPropertyException: No such property: multiplier for class: Doubler&lt;/code&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;A closure gets compiled as an anonymous inner class and when run will attempt to resolve unknown property references against its &lt;em&gt;owner&lt;/em&gt; – in this case the object that contains it. Because the &lt;code&gt;multiplier&lt;/code&gt; field is not visible from the &lt;code&gt;Doubler&lt;/code&gt; class the reference doesn&amp;#8217;t work. If &lt;code&gt;multiplier&lt;/code&gt; is declared &lt;code&gt;protected&lt;/code&gt; the code works just fine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This is definitely worth bearing in mind if you are building library code designed to be extended by other people.&lt;/p&gt;
&lt;/div&gt;</content>
  </entry>
</feed>
